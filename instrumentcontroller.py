import datetime
import time

from os.path import isfile
from PyQt5.QtCore import QObject, pyqtSlot

from arduino.programmerfactory import ProgrammerFactory
from instr.instrumentfactory import NetworkAnalyzerFactory, mock_enabled
from measureresult import MeasureResult


class InstrumentController(QObject):
    phases = [
        22.5,
        45.0,
        90.0,
        180.0
    ]

    states = {
        # i: f'{i:06b}' for i in range(64)
        i: i for i in range(64)
    }

    def __init__(self, parent=None):
        super().__init__(parent=parent)

        self.requiredInstruments = {
            'Анализатор': NetworkAnalyzerFactory('GPIB0::9::INSTR'),
            'Программатор': ProgrammerFactory('COM5')
        }

        self.deviceParams = {
            'Цифровой фазовращатель': {
                'F': [1.15, 1.35, 1.75, 1.92, 2.25, 2.54, 2.7, 3, 3.47, 3.86, 4.25],
                'mul': 2,
                'P1': 15,
                'P2': 21,
                'Istat': [None, None, None],
                'Idyn': [None, None, None]
            },
        }

        if isfile('./params.ini'):
            import ast
            with open('./params.ini', 'rt', encoding='utf-8') as f:
                raw = ''.join(f.readlines())
                self.deviceParams = ast.literal_eval(raw)

        self.secondaryParams = {
            'Pin': -10,
            'F1': 4,
            'F2': 8,
            'State': 0
        }

        self.span = 0.1
        self.sweep_points = 51

        self._instruments = dict()
        self.found = False
        self.present = False
        self.hasResult = False

        self.result = MeasureResult()

        self._freqs = list()
        self._mag_s11s = list()
        self._mag_s22s = list()
        self._mag_s21s = list()
        self._phs_s21s = list()
        self._phase_values = list()

    def __str__(self):
        return f'{self._instruments}'

    def connect(self, addrs):
        print(f'searching for {addrs}')
        for k, v in addrs.items():
            self.requiredInstruments[k].addr = v
        self.found = self._find()

    def _find(self):
        self._instruments = {
            k: v.find() for k, v in self.requiredInstruments.items()
        }
        return all(self._instruments.values())

    def check(self, params):
        print(f'call check with {params}')
        device, secondary = params
        self.present = self._check(device, secondary)
        print('sample pass')

    def _check(self, device, secondary):
        print(f'launch check with {self.deviceParams[device]} {self.secondaryParams}')
        return self._runCheck(self.deviceParams[device], self.secondaryParams)

    def _runCheck(self, param, secondary):
        print(f'run check with {param}, {secondary}')
        return True

    def measure(self, params):
        print(f'call measure with {params}')
        device, secondary = params
        res = self._measure(device, secondary)
        self.result.raw_data = self.sweep_points, res, self._phase_values
        self.hasResult = bool(self.result)

    def _measure(self, device, secondary):
        param = self.deviceParams[device]
        secondary = self.secondaryParams
        print(f'launch measure with {param} {secondary}')

        self._clear()
        self._init(secondary)

        return self._measure_s_params()

    def _clear(self):
        self._phase_values.clear()

    def _init(self, params):
        pna = self._instruments['Анализатор']
        prog = self._instruments['Программатор']
#
        pna.send('SYST:PRES')
        pna.query('*OPC?')
        # pna.send('CALC:PAR:DEL:ALL')

        pna.send('CALC1:PAR:DEF "CH1_S21",S21')

        # c:\program files\agilent\newtowrk analyzer\UserCalSets
        # TODO calibration
        # pna.send('SENS1:CORR:CSET:ACT "-20dBm_1.1-1.4G",1')
        # pna.send('SENS2:CORR:CSET:ACT "-20dBm_1.1-1.4G",1')

        pna.send(f'SENS1:SWE:POIN {self.sweep_points}')

        pna.send(f'SENS1:FREQ:STAR {params["F1"]}GHz')
        pna.send(f'SENS1:FREQ:STOP {params["F2"]}GHz')

        pna.send('SENS1:SWE:MODE CONT')
        pna.send(f'FORM:DATA ASCII')

        prog.set_lpf_code(0)

    def _measure_s_params(self):
        pna = self._instruments['Анализатор']
        prog = self._instruments['Программатор']

        out = list()
        res = '+2.00000000000E+009,+2.04000000000E+009,+2.08000000000E+009,+2.12000000000E+009,+2.16000000000E+009,+2.20000000000E+009,+2.24000000000E+009,+2.28000000000E+009,+2.32000000000E+009,+2.36000000000E+009,+2.40000000000E+009,+2.44000000000E+009,+2.48000000000E+009,+2.52000000000E+009,+2.56000000000E+009,+2.60000000000E+009,+2.64000000000E+009,+2.68000000000E+009,+2.72000000000E+009,+2.76000000000E+009,+2.80000000000E+009,+2.84000000000E+009,+2.88000000000E+009,+2.92000000000E+009,+2.96000000000E+009,+3.00000000000E+009,+3.04000000000E+009,+3.08000000000E+009,+3.12000000000E+009,+3.16000000000E+009,+3.20000000000E+009,+3.24000000000E+009,+3.28000000000E+009,+3.32000000000E+009,+3.36000000000E+009,+3.40000000000E+009,+3.44000000000E+009,+3.48000000000E+009,+3.52000000000E+009,+3.56000000000E+009,+3.60000000000E+009,+3.64000000000E+009,+3.68000000000E+009,+3.72000000000E+009,+3.76000000000E+009,+3.80000000000E+009,+3.84000000000E+009,+3.88000000000E+009,+3.92000000000E+009,+3.96000000000E+009,+4.00000000000E+009,-4.27083549500E+001,-3.14747676849E+001,-2.86942634583E+001,-2.76773033142E+001,-4.40158691406E+001,-2.61837654114E+001,-2.64000816345E+001,-3.50415802002E+001,-2.83416004181E+001,-2.70698356628E+001,-2.66401500702E+001,-2.86759967804E+001,-2.54666957855E+001,-3.36976013184E+001,-4.36494216919E+001,-2.61706848145E+001,-3.01955089569E+001,-3.34557151794E+001,-3.28088073730E+001,-3.46787261963E+001,-2.19775428772E+001,-4.94408645630E+001,-2.39104938507E+001,-2.62949733734E+001,-2.58110847473E+001,-3.13991146088E+001,-2.21560916901E+001,-2.69522418976E+001,-2.44037437439E+001,-2.35646190643E+001,-2.30709838867E+001,-2.98047351837E+001,-2.96708583832E+001,-2.09796733856E+001,-3.24527435303E+001,-2.56910057068E+001,-3.13473510742E+001,-2.43299961090E+001,-2.49845829010E+001,-2.50418243408E+001,-3.11124973297E+001,-2.84651317596E+001,-2.23139858246E+001,-2.44735584259E+001,-2.01981220245E+001,-2.75418281555E+001,-2.56165256500E+001,-2.08900375366E+001,-2.16000766754E+001,-2.54345359802E+001,-2.13571243286E+001,+8.07746887207E+001,-1.00779762268E+002,+8.20415210724E+000,+1.89364719391E+001,-4.01970624924E+000,-4.96297454834E+001,+3.48004989624E+001,+1.26675056458E+002,-1.74492244720E+001,+2.27529335022E+000,+7.07642974854E+001,-6.93475875854E+001,+1.51300249100E+001,+8.13210067749E+001,+6.02516403198E+001,+2.01191349030E+001,+2.83889923096E+001,-1.69038219452E+001,+1.70049209595E+002,+2.17142601013E+001,+7.59768295288E+001,-4.25991401672E+001,-3.89376335144E+001,+1.12590377808E+002,+1.57809829712E+002,+1.73896770477E+001,+3.72359161377E+001,-1.64613525391E+002,-1.21842391968E+002,+8.16344299316E+001,+1.39307601929E+002,-4.87907295227E+001,-1.80800533295E+001,+1.70253387451E+002,-1.24195243835E+002,+1.32948104858E+002,-4.91128349304E+000,-1.64834289551E+002,-1.24557228088E+002,+1.40218460083E+002,-1.68646331787E+002,+1.75233978271E+002,-9.26317901611E+001,+1.49434616089E+002,-1.61795196533E+002,-7.09528427124E+001,+1.20932121277E+002,-1.39954437256E+002,-1.20183425903E+002,+1.14798088074E+002,-1.57850906372E+002,-6.18107914925E-001,-8.94330501556E-001,-1.12430727482E+000,-1.11140215397E+000,-1.00413835049E+000,-8.98521482944E-001,-8.07062506676E-001,-7.68110513687E-001,-7.79021382332E-001,-8.06530117989E-001,-8.34392547607E-001,-8.20506215096E-001,-8.73693406582E-001,-8.99765551090E-001,-8.44636321068E-001,-8.18116068840E-001,-7.66355156898E-001,-7.46592044830E-001,-7.82238304615E-001,-7.93858826160E-001,-6.94373905659E-001,-5.78845262527E-001,-6.13136947155E-001,-6.53174757957E-001,-7.76625275612E-001,-7.28542208672E-001,-8.36757719517E-001,-9.15822803974E-001,-9.58058357239E-001,-9.90902483463E-001,-1.08334934711E+000,-1.01308083534E+000,-9.77127492428E-001,-1.05320370197E+000,-1.07832825184E+000,-1.13968515396E+000,-1.22096669674E+000,-1.13190770149E+000,-1.12857639790E+000,-1.07154285908E+000,-1.13106882572E+000,-1.21549642086E+000,-1.26033949852E+000,-1.27333688736E+000,-1.28511059284E+000,-1.14155960083E+000,-1.19044566154E+000,-1.32238483429E+000,-1.29110872746E+000,-1.23335742950E+000,-1.22811412811E+000,-2.16820201874E+001,-9.47892608643E+001,-1.66362152100E+002,+1.22815391541E+002,+5.11166648865E+001,-2.10172176361E+001,-9.32294845581E+001,-1.65847793579E+002,+1.21552314758E+002,+4.91889343262E+001,-2.31897773743E+001,-9.54050903320E+001,-1.67068054199E+002,+1.21557617188E+002,+4.99541511536E+001,-2.21509971619E+001,-9.48112792969E+001,-1.67751083374E+002,+1.19523200989E+002,+4.72345733643E+001,-2.44588928223E+001,-9.69407119751E+001,-1.69573043823E+002,+1.18151565552E+002,+4.59783325195E+001,-2.57314720154E+001,-9.89625015259E+001,-1.72585372925E+002,+1.13802215576E+002,+4.22859573364E+001,-2.95946502686E+001,-1.01414421082E+002,-1.73333740234E+002,+1.14747520447E+002,+4.09778747559E+001,-3.13712062836E+001,-1.03944061279E+002,-1.76486495972E+002,+1.10864387512E+002,+3.83092727661E+001,-3.34428100586E+001,-1.05466903687E+002,-1.77124008179E+002,+1.10984573364E+002,+3.78582420349E+001,-3.28711547852E+001,-1.05426658630E+002,-1.78711013794E+002,+1.09075859070E+002,+3.64534721375E+001,-3.60156250000E+001,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,-2.00000000000E+002,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,+4.50000000000E+001,-4.32360305786E+001,-3.20097732544E+001,-4.90618019104E+001,-2.53233394623E+001,-6.55037689209E+001,-2.86073150635E+001,-2.68759174347E+001,-3.04053974152E+001,-3.12742481232E+001,-2.56914482117E+001,-2.29480857849E+001,-2.48238601685E+001,-2.38594017029E+001,-3.60401725769E+001,-3.97556343079E+001,-2.69140415192E+001,-3.11192722321E+001,-3.19911861420E+001,-3.70465774536E+001,-3.24355735779E+001,-2.34500904083E+001,-3.79982147217E+001,-2.73671531677E+001,-3.60043373108E+001,-2.11113643646E+001,-2.72289485931E+001,-1.83213443756E+001,-2.37275161743E+001,-2.64484882355E+001,-2.36790447235E+001,-2.52576389313E+001,-2.91224613190E+001,-2.75132980347E+001,-2.13808040619E+001,-3.96713676453E+001,-3.82663917542E+001,-3.17913932800E+001,-2.60909824371E+001,-2.73538684845E+001,-3.55742912292E+001,-3.04213314056E+001,-2.86273593903E+001,-2.41025543213E+001,-2.34052848816E+001,-2.64275970459E+001,-2.77762718201E+001,-2.88433628082E+001,-2.27413272858E+001,-2.23658790588E+001,-2.68005352020E+001,-2.39083709717E+001,+3.30708274841E+001,-1.48636276245E+002,-4.21142196655E+001,-4.28569068909E+001,+1.72882232666E+002,-1.31237106323E+002,-4.59897460938E+001,+6.35706481934E+001,-7.09159011841E+001,-9.46189956665E+001,+1.34811086655E+001,-1.56879043579E+002,-4.18949012756E+001,+4.59973526001E+001,-9.86059417725E+001,-2.68914279938E+001,-6.93952407837E+001,-5.91436958313E+001,+1.04697463989E+002,-1.01412658691E+001,-3.32090492249E+001,-4.23315734863E+001,-1.48313034058E+002,-2.63305149078E+001,+2.85585117340E+001,-1.69168899536E+002,-6.01403884888E+001,+9.21302185059E+001,+1.58443771362E+002,-1.82203636169E+001,+1.29907398224E+001,+1.78973846436E+002,-1.19099304199E+002,+5.56297912598E+001,+7.84152145386E+001,-3.71295890808E+001,-3.36284408569E+001,+1.26964408875E+002,+7.46599273682E+001,+4.12480659485E+001,+1.64537525177E+001,+7.47844390869E+001,+1.76995666504E+002,+3.51753196716E+001,+7.91260452271E+001,+1.44062164307E+002,-4.07142066956E+001,+8.45105361938E+001,+1.14309181213E+002,-4.13273849487E+001,+7.33916702271E+001'
        for state in list(self.states.values())[:1]:
            self._phase_values.append(self._phase_for_state(state))

            prog.set_lpf_code(state)

            if not mock_enabled:
                time.sleep(0.1)

            pna.send(f'CALC1:PAR:SEL "CH1_S21"')
            pna.query('*OPC?')
            # res = pna.query(f'CALC1:DATA:SNP? 2')
            out.append(parse_float_list(res))

            if not mock_enabled:
                time.sleep(0.2)
        return out

    def _phase_for_state(self, pattern):
        # TODO calculate phase by bit pattern
        # return sum([ph * pt for ph, pt in zip(self.phases, pattern)])
        return pattern

    def pow_sweep(self):
        print('pow sweep')
        return [4, 5, 6], [4, 5, 6]

    @pyqtSlot(dict)
    def on_secondary_changed(self, params):
        self.secondaryParams = params

    @property
    def status(self):
        return [i.status for i in self._instruments.values()]


def parse_float_list(lst):
    return [float(x) for x in lst.split(',')]
